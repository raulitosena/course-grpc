// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: math.proto
// Protobuf C++ Version: 5.27.2

#include "math.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace math {

inline constexpr SumResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : result_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SumResult::SumResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SumResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SumResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SumResultDefaultTypeInternal() {}
  union {
    SumResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SumResultDefaultTypeInternal _SumResult_default_instance_;

inline constexpr SumOperand::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : op1_{0},
        op2_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SumOperand::SumOperand(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SumOperandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SumOperandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SumOperandDefaultTypeInternal() {}
  union {
    SumOperand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SumOperandDefaultTypeInternal _SumOperand_default_instance_;
}  // namespace math
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_math_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_math_2eproto = nullptr;
const ::uint32_t
    TableStruct_math_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::math::SumOperand, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::math::SumOperand, _impl_.op1_),
        PROTOBUF_FIELD_OFFSET(::math::SumOperand, _impl_.op2_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::math::SumResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::math::SumResult, _impl_.result_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::math::SumOperand)},
        {10, -1, -1, sizeof(::math::SumResult)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::math::_SumOperand_default_instance_._instance,
    &::math::_SumResult_default_instance_._instance,
};
const char descriptor_table_protodef_math_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\nmath.proto\022\004math\"&\n\nSumOperand\022\013\n\003op1\030"
    "\001 \001(\002\022\013\n\003op2\030\002 \001(\002\"\033\n\tSumResult\022\016\n\006resul"
    "t\030\001 \001(\0022A\n\014MathServices\0221\n\ncomputeSum\022\020."
    "math.SumOperand\032\017.math.SumResult\"\000b\006prot"
    "o3"
};
static ::absl::once_flag descriptor_table_math_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_math_2eproto = {
    false,
    false,
    162,
    descriptor_table_protodef_math_2eproto,
    "math.proto",
    &descriptor_table_math_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_math_2eproto::offsets,
    file_level_enum_descriptors_math_2eproto,
    file_level_service_descriptors_math_2eproto,
};
namespace math {
// ===================================================================

class SumOperand::_Internal {
 public:
};

SumOperand::SumOperand(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:math.SumOperand)
}
SumOperand::SumOperand(
    ::google::protobuf::Arena* arena, const SumOperand& from)
    : SumOperand(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SumOperand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SumOperand::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, op1_),
           0,
           offsetof(Impl_, op2_) -
               offsetof(Impl_, op1_) +
               sizeof(Impl_::op2_));
}
SumOperand::~SumOperand() {
  // @@protoc_insertion_point(destructor:math.SumOperand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SumOperand::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SumOperand::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(SumOperand, _impl_._cached_size_),
              false,
          },
          &SumOperand::MergeImpl,
          &SumOperand::kDescriptorMethods,
          &descriptor_table_math_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SumOperand::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SumOperand_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::math::SumOperand>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float op2 = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(SumOperand, _impl_.op2_)}},
    // float op1 = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(SumOperand, _impl_.op1_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float op1 = 1;
    {PROTOBUF_FIELD_OFFSET(SumOperand, _impl_.op1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float op2 = 2;
    {PROTOBUF_FIELD_OFFSET(SumOperand, _impl_.op2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SumOperand::Clear() {
// @@protoc_insertion_point(message_clear_start:math.SumOperand)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.op1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.op2_) -
      reinterpret_cast<char*>(&_impl_.op1_)) + sizeof(_impl_.op2_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SumOperand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:math.SumOperand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float op1 = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_op1 = this->_internal_op1();
  ::uint32_t raw_op1;
  memcpy(&raw_op1, &tmp_op1, sizeof(tmp_op1));
  if (raw_op1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_op1(), target);
  }

  // float op2 = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_op2 = this->_internal_op2();
  ::uint32_t raw_op2;
  memcpy(&raw_op2, &tmp_op2, sizeof(tmp_op2));
  if (raw_op2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_op2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:math.SumOperand)
  return target;
}

::size_t SumOperand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:math.SumOperand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // float op1 = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_op1 = this->_internal_op1();
  ::uint32_t raw_op1;
  memcpy(&raw_op1, &tmp_op1, sizeof(tmp_op1));
  if (raw_op1 != 0) {
    total_size += 5;
  }

  // float op2 = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_op2 = this->_internal_op2();
  ::uint32_t raw_op2;
  memcpy(&raw_op2, &tmp_op2, sizeof(tmp_op2));
  if (raw_op2 != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SumOperand::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SumOperand*>(&to_msg);
  auto& from = static_cast<const SumOperand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:math.SumOperand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_op1 = from._internal_op1();
  ::uint32_t raw_op1;
  memcpy(&raw_op1, &tmp_op1, sizeof(tmp_op1));
  if (raw_op1 != 0) {
    _this->_impl_.op1_ = from._impl_.op1_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_op2 = from._internal_op2();
  ::uint32_t raw_op2;
  memcpy(&raw_op2, &tmp_op2, sizeof(tmp_op2));
  if (raw_op2 != 0) {
    _this->_impl_.op2_ = from._impl_.op2_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SumOperand::CopyFrom(const SumOperand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:math.SumOperand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SumOperand::InternalSwap(SumOperand* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SumOperand, _impl_.op2_)
      + sizeof(SumOperand::_impl_.op2_)
      - PROTOBUF_FIELD_OFFSET(SumOperand, _impl_.op1_)>(
          reinterpret_cast<char*>(&_impl_.op1_),
          reinterpret_cast<char*>(&other->_impl_.op1_));
}

::google::protobuf::Metadata SumOperand::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SumResult::_Internal {
 public:
};

SumResult::SumResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:math.SumResult)
}
SumResult::SumResult(
    ::google::protobuf::Arena* arena, const SumResult& from)
    : SumResult(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SumResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SumResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
SumResult::~SumResult() {
  // @@protoc_insertion_point(destructor:math.SumResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SumResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SumResult::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(SumResult, _impl_._cached_size_),
              false,
          },
          &SumResult::MergeImpl,
          &SumResult::kDescriptorMethods,
          &descriptor_table_math_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SumResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SumResult_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::math::SumResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float result = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(SumResult, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float result = 1;
    {PROTOBUF_FIELD_OFFSET(SumResult, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SumResult::Clear() {
// @@protoc_insertion_point(message_clear_start:math.SumResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SumResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:math.SumResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float result = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_result = this->_internal_result();
  ::uint32_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:math.SumResult)
  return target;
}

::size_t SumResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:math.SumResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float result = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_result = this->_internal_result();
  ::uint32_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SumResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SumResult*>(&to_msg);
  auto& from = static_cast<const SumResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:math.SumResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_result = from._internal_result();
  ::uint32_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    _this->_impl_.result_ = from._impl_.result_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SumResult::CopyFrom(const SumResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:math.SumResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SumResult::InternalSwap(SumResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata SumResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace math
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_math_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
