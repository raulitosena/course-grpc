// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: math.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_math_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_math_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_math_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_math_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_math_2eproto;
namespace math {
class SumOperand;
struct SumOperandDefaultTypeInternal;
extern SumOperandDefaultTypeInternal _SumOperand_default_instance_;
class SumResult;
struct SumResultDefaultTypeInternal;
extern SumResultDefaultTypeInternal _SumResult_default_instance_;
}  // namespace math
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace math {

// ===================================================================


// -------------------------------------------------------------------

class SumResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:math.SumResult) */ {
 public:
  inline SumResult() : SumResult(nullptr) {}
  ~SumResult() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SumResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline SumResult(const SumResult& from) : SumResult(nullptr, from) {}
  inline SumResult(SumResult&& from) noexcept
      : SumResult(nullptr, std::move(from)) {}
  inline SumResult& operator=(const SumResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SumResult& operator=(SumResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SumResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SumResult* internal_default_instance() {
    return reinterpret_cast<const SumResult*>(
        &_SumResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SumResult& a, SumResult& b) { a.Swap(&b); }
  inline void Swap(SumResult* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SumResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SumResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SumResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SumResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SumResult& from) { SumResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SumResult* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "math.SumResult"; }

 protected:
  explicit SumResult(::google::protobuf::Arena* arena);
  SumResult(::google::protobuf::Arena* arena, const SumResult& from);
  SumResult(::google::protobuf::Arena* arena, SumResult&& from) noexcept
      : SumResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 1,
  };
  // float result = 1;
  void clear_result() ;
  float result() const;
  void set_result(float value);

  private:
  float _internal_result() const;
  void _internal_set_result(float value);

  public:
  // @@protoc_insertion_point(class_scope:math.SumResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SumResult_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SumResult& from_msg);
    float result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_math_2eproto;
};
// -------------------------------------------------------------------

class SumOperand final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:math.SumOperand) */ {
 public:
  inline SumOperand() : SumOperand(nullptr) {}
  ~SumOperand() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SumOperand(
      ::google::protobuf::internal::ConstantInitialized);

  inline SumOperand(const SumOperand& from) : SumOperand(nullptr, from) {}
  inline SumOperand(SumOperand&& from) noexcept
      : SumOperand(nullptr, std::move(from)) {}
  inline SumOperand& operator=(const SumOperand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SumOperand& operator=(SumOperand&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SumOperand& default_instance() {
    return *internal_default_instance();
  }
  static inline const SumOperand* internal_default_instance() {
    return reinterpret_cast<const SumOperand*>(
        &_SumOperand_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SumOperand& a, SumOperand& b) { a.Swap(&b); }
  inline void Swap(SumOperand* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SumOperand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SumOperand* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SumOperand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SumOperand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SumOperand& from) { SumOperand::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SumOperand* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "math.SumOperand"; }

 protected:
  explicit SumOperand(::google::protobuf::Arena* arena);
  SumOperand(::google::protobuf::Arena* arena, const SumOperand& from);
  SumOperand(::google::protobuf::Arena* arena, SumOperand&& from) noexcept
      : SumOperand(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOp1FieldNumber = 1,
    kOp2FieldNumber = 2,
  };
  // float op1 = 1;
  void clear_op1() ;
  float op1() const;
  void set_op1(float value);

  private:
  float _internal_op1() const;
  void _internal_set_op1(float value);

  public:
  // float op2 = 2;
  void clear_op2() ;
  float op2() const;
  void set_op2(float value);

  private:
  float _internal_op2() const;
  void _internal_set_op2(float value);

  public:
  // @@protoc_insertion_point(class_scope:math.SumOperand)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SumOperand_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SumOperand& from_msg);
    float op1_;
    float op2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_math_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SumOperand

// float op1 = 1;
inline void SumOperand::clear_op1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op1_ = 0;
}
inline float SumOperand::op1() const {
  // @@protoc_insertion_point(field_get:math.SumOperand.op1)
  return _internal_op1();
}
inline void SumOperand::set_op1(float value) {
  _internal_set_op1(value);
  // @@protoc_insertion_point(field_set:math.SumOperand.op1)
}
inline float SumOperand::_internal_op1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op1_;
}
inline void SumOperand::_internal_set_op1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op1_ = value;
}

// float op2 = 2;
inline void SumOperand::clear_op2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op2_ = 0;
}
inline float SumOperand::op2() const {
  // @@protoc_insertion_point(field_get:math.SumOperand.op2)
  return _internal_op2();
}
inline void SumOperand::set_op2(float value) {
  _internal_set_op2(value);
  // @@protoc_insertion_point(field_set:math.SumOperand.op2)
}
inline float SumOperand::_internal_op2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op2_;
}
inline void SumOperand::_internal_set_op2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op2_ = value;
}

// -------------------------------------------------------------------

// SumResult

// float result = 1;
inline void SumResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline float SumResult::result() const {
  // @@protoc_insertion_point(field_get:math.SumResult.result)
  return _internal_result();
}
inline void SumResult::set_result(float value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:math.SumResult.result)
}
inline float SumResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_;
}
inline void SumResult::_internal_set_result(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace math


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_math_2eproto_2epb_2eh
